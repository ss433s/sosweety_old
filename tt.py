import sys
import argparse
#from stanfordcorenlp import StanfordCoreNLP
#nlp = StanfordCoreNLP(r'/mnt/e/ubuntu/stanford-corenlp-full-2018-10-05/',lang='zh')
import base64
f = open('uk.txt', 'r').read()


# s ='\xdbM}\xd7M5\xd3M4\xd3\xb220/\xe4\xc4\xa4ET\x14\x13$\xa3t\xa3\x03\x03\x03sSC\x00\x10\x12\xd10\xa0\x10\x00\x00p\x10\x100\x10\x01\xe0\x00x\x86\xd0\xeb\x12s\x15\x00\x11\xe0>\x80\x00\xa0 \x10\x10\x14\xc4\xf8T\xea\t \xeb\x12s\x10P\x00r\xc0\x16\xa0"h\x8f\xf0`\x10\x10\xf5\x10\x10\xb0\xf4\xb0\x10\xb4\x90\x10d`p\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x10\x10\xeb\x12s\x10\x06\x00\x00\x16\x00\xf5\x10\xf4\xf0\xf4\xf0\xf4\xf0\xf4\xe0\xf5\x10\xf4\xf0\xf5\x10\xf4\xe0\xf4\xf0\xf4\xb0\xf4\xf0\xf4\xe0\xf4\xf0\xf4\xe0\xf4\xf0\xf4\xf0\xf4\xe0\xf4\xf0\xf4\xf0\xf4\xe0\xf4\xe0\xf4\xf0\xf5\x10\xf4\xf0\xf4\xb0\xf4\xe0\xf4\xe0\xf4\xf0\xf4\xc0\xf4\xe0\xf4\xc0\xf4\xb0\xf5\x10\xf4\xc0\xf4\xf0\xf4\xe0\xf5\x10\xf4\xc0\xf4\xe0\xf4\xe0\xf4\xe0\xf4\xf0\xf4\xf0\xf4\xf0\xf4\xe0\xf4\xf0\xf5\x10\xf4\xe0\xf4\xe0\xf4\xe0\xf4\xf0\xf4\xe0\xf4\xe0\xf4\xe0\xf4\xf0\xf4\xe0\xf4\xe0\xf4\xe0\xf5\x10\xf4\xe0\xf4\xf0\xf4\xe0\xf4\xe0\xf4\xe0\xf4\xf0\xf4\xe0\xf4\xe0\xf4\xf0\xf4\xe0\xf4\xf0\xf4\xf0\xf4\xe0\xf4\xf0\xf4\xf0\xf4\xc0\xf4\xf0\xf4\xe0\xf4\xe0\xf4\xe0\xf5\x10\xf4\xe0\xf4\xe0\xf4\xe0\xf4\xe0\xf4\xf0\xf4\xf0\xf4\xe0\xf5\x10\xf4\xe0\xf5\x10\xf4\xe0\xf4\xf0\xf5\x10\xf4\xe0\xf4\xf0\x90\x10\x10\x01\x04ttt\x84td\x84\x84\x84\x84\x94\x84\x94\x84\x84\x8fsm5\xf7]4\xd7M4\xd3^\xc8\xc8\xc0\xbf\x93\x12\x91\x15PPL\x92\x8d\xd2\x8c\x0c\x0c\r\xcdM\x0c\x00@KD\xc2\x80@\x00\x04@@@\xc0@2\x00\x01\xe2\x1b\x83\xab\x89\xc9T\x00G\x80\xfa\x00\x01\x00\x80@@\x92\x94\xf2Sz\xe4\x83\xab\x89\xc9A@\x01\xcb\x00\xab\xc0\x89\xa2\x1c\x81\x80R\x83\xd3\xc0B\xc3\xd2\x00CR@A\x91\x81\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00@C\xab\x89\xc9@\x18\x00\x00X\x03\xd2\xc3\xd2\xc3\xd2\xc3\xd2\xc3\xd2\xc3\xd3\x03\xd2\xc3\xd2\xc3\xd2\xc3\xd2\xc3\xd2\x03\xd2\xc3\xd2\xc3\xd2\xc3\xd2\xc3\xd3\x83\xd2\xc3\xd2\xc3\xd2\xc3\xd2\xc3\xd2\xc3\xd2\xc3\xd2\xc3\xd3\x03\xd2\xc3\xd2\x03\xd2\x03\xd2\xc3\xd2\xc3\xd2C\xd2\xc3\xd2\x03\xd2\x03\xd3\x03\xd2\x03\xd2\xc3\xd2\xc3\xd3\x03\xd2\x03\xd2\xc3\xd2\xc3\xd2\xc3\xd3\x03\xd2\xc3\xd3\x83\xd2\xc3\xd3\x03\xd3\x83\xd2\xc3\xd2\xc3\xd2\xc3\xd3\x03\xd2\xc3\xd2\xc3\xd2\xc3\xd2\xc3\xd2C\xd2\xc3\xd3\x03\xd3\x83\xd3\x83\xd3\x83\xd3\x03\xd3\x03\xd3\x83\xd3\x83\xd3\x83\xd3\x03\xd3\x83\xd2\xc3\xd3\x03\xd3\x03\xd3\x83\xd3\xc3\xd3\x83\xd2\xc3\xd3\x83\xd3\x83\xd3\x83\xd3\x83\xd3\x83\xd3\x03\xd3\x83\xd3\x83\xd3\x83\xd3\x83\xd3\x03\xd3\x03\xd3\x03\xd2\xc3\xd2\xc3\xd2C\xd2\xc3\xd2\xc3\xd2\xc3\xd2\xc2@@@\x04\x11\xd1\xd1\xd2\x11\xd1\x92\x12\x12\x12\x12\x12\x12R\x12\x12\r\xcd\xb4\xd7\xddt\xd3]4\xd3M\xbb##\x02\xfeLJDUAA2J7J0007540\x01\x01-\x13\n\x01\x00\x00\x1b\x01\x01\x03\x01\x01\'\x00\x07\x88n\x0e\xa3\'oP\x01.\x03\xe8\x07\x00\x02\x01\x01\x01KS\xc6N\xf8\x92\x0e\xa3\'o\x05\x00\x07,\x02\xaf\x02&\x88r\x06\x01+\x0fB\x01\x0b\x0f<\x01\rI\x01\x06F\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x01\x01\x0e\xa3\'o\x00`\x00\x01`\x0f@\x0f@\x0f?\x0f?\x0f?\x0f?\x0f?\x0f?\x0f@\x0f?\x0f<\x0f?\x0f?\x0f@\x0f@\x0f@\x0f@\x0f?\x0f@\x0f@\x0f?\x0f?\x0f@\x0f?\x0f@\x0f<\x0f?\x0f@\x0f@\x0f?\x0f?\x0f=\x0f=\x0f@\x0f?\x0f@\x0f@\x0f@\x0f=\x0f?\x0f?\x0f?\x0fB\x0f@\x0fB\x0f@\x0f@\x0fB\x0f?\x0f?\x0f?\x0f?\x0f?\x0f@\x0f@\x0f@\x0f=\x0f?\x0f?\x0f@\x0f?\x0f@\x0f?\x0f@\x0f@\x0f@\x0f@\x0fB\x0f@\x0f@\x0fB\x0f@\x0f@\x0fB\x0fB\x0f?\x0f@\x0f@\x0f@\x0f?\x0fB\x0f@\x0f@\x0f@\x0fB\x0fB\x0fB\x0f@\x0f?\x0f=\x0f?\x0f=\x0f?\x0f?\x0f=\x0f?\t\x01\x01\x00\x10GGGHGFHHHHHHIHHH\xda'
# b = s.encode('raw_unicode_escape')
# b2 = b.decode()

s=base64.b64decode('IyMC/kxKRFVBQTJKN0owMDA3NTQwAQEtEwoBFzs1AQEDAQFKAAeWmw04Jx4PAQ4D6AAAAgEBAlJUVE4Cew04Jx4FAAcm4ugCI0nGBgE5Dc4BCw25AQFIAQJHBwAAAAAAAAAAAAgBAQ04Jx4AYAABYA3GDckNww3DDcUNww3JDcUNyA3LDbkNyA3CDcUNyw3DDcUNxQ3GDcsNyw3FDcgNyA3IDcgNwg3CDcINyA3CDcUNxQ3IDcINwg3DDb8NxQ3IDcANxg3IDcgNxQ3CDcgNyA3CDcINyw3DDcUNyA3GDcYNzg3JDcsNyA3FDcsNyA3CDcgNwg3FDcUNwg3CDcUNxQ3CDcUNyA2/DcgNxg3FDcANxQ3CDb8NxQ3LDcgNvw3CDckNwA3CDcINyw3FDcINwgkBAQAQSEdISEhHSEhISEhISEhISJY=')
print(s)
s = b'\xdb'
s = s.decode('utf8')
print(ord(s[0]))
print(s[1])
s=s.decode(encoding = "gb2312", errors="ignore")
print(s)
# import re

import chardet
s2 = chardet.detect(s)
print(s2)



def unicodetostr( s ):
    strTobytes = []
    for i in s.split('\\x'):
        if i != '':
            num = int(i,16)
            strTobytes.append(num)
    a = bytes(strTobytes).decode()
    return a
def ti(m):
    s = str(m.group())
    a = unicodetostr(s)
    return a
# pat = re.compile(r'(\\x[0-9a-fA-F][0-9a-fA-F]){3}')
# with open('filename') as file:
#     for line in file:
#         '''for m in re.finditer(pat,line):
#             print(m.group())'''
#         print(re.sub(pat,ti,line))

s=unicodetostr(s)


f2.write(s)
f2.close()
s.decode('gbk')
a = s.encode('unicode_escape').decode('string_escape')
b = repr(a)
print(unicode(eval(b),"gbk").encode('utf8'))
print(len(s))
#print(f.encode('utf-8').decode('gbk'))

